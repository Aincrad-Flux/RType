pipeline {
    agent {
        docker {
            image 'debian:bookworm'
            args '-u root:root --privileged'
        }
    }

    parameters {
        string(name: 'SOURCE_REPO', defaultValue: 'https://github.com/Aincrad-Flux/RType.git', description: 'URL of the repo to clone for setup')
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to test')
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning branch: ${params.BRANCH_NAME} from ${params.SOURCE_REPO}"
                git branch: "${params.BRANCH_NAME}",
                    url: "${params.SOURCE_REPO}",
                    credentialsId: 'github-https-token'
            }
        }

        stage('Setup Conan') {
            steps {
                sh '''
                    echo "Installing system dependencies..."
                    apt-get update
                    # Include pkg-config so Conan's opengl/system recipe can query GL with pkg-config
                    apt-get install -y build-essential cmake git python3-pip python3-venv pkg-config

                    echo "Installing Conan 2..."
                    pip3 install --break-system-packages --upgrade conan

                    echo "Configuring Conan 2..."
                    conan --version

                    # Detect profile for Conan 2.x
                    conan profile detect --force
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "Running setup..."
                    make setup || true
                '''
            }
        }

        stage('Build project') {
            steps {
                sh '''
                    echo "Running setup..."
                    make build
                '''
            }
        }

        stage('Check Binaries') {
            steps {
                sh '''
                    echo "Verifying binaries existence..."
                    if [ ! -f "build/bin/r-type_client" ] || [ ! -f "build/bin/r-type_server" ]; then
                        echo "❌ One or both binaries are missing!"
                        exit 1
                    fi

                    if [ ! -x "build/bin/r-type_client" ] || [ ! -x "build/bin/r-type_server" ]; then
                        echo "⚠️ One or both binaries are not executable, fixing permissions..."
                        chmod +x build/bin/r-type_client build/bin/r-type_server
                    fi

                    echo "✅ Both binaries are present and ready."
                    ls -lh build/bin/r-type_client build/bin/r-type_server
                '''
            }
        }

        stage('Archive Binaries') {
            steps {
                sh '''
                    echo "Checking if binaries exist..."
                    ls -lh build/bin/r-type_client build/bin/r-type_server
                '''
                archiveArtifacts artifacts: 'build/bin/r-type_client, build/bin/r-type_server',
                                 fingerprint: true,
                                 allowEmptyArchive: false
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}