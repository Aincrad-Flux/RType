pipeline {
  agent any
  parameters {
    string(name: 'SOURCE_REPO', defaultValue: 'https://github.com/Aincrad-Flux/RType.git', description: 'URL du repository à cloner')
    string(name: 'BRANCH', defaultValue: 'main', description: 'Branche à builder')
    choice(name: 'BUILD_TYPE', choices: ['Debug', 'Release'], description: 'Type de build CMake')
    booleanParam(name: 'RUN_TESTS', defaultValue: false, description: 'Exécuter les tests (si présents)')
  }
  environment {
    CONAN_USER_HOME = "${WORKSPACE}/.conan"
  }
  options {
    timestamps()
    ansiColor('xterm')
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: params.BRANCH, url: params.SOURCE_REPO, credentialsId: 'github-https-token'
      }
    }
    stage('Conan Install') {
      steps {
        sh '''
          set -e
          conan profile detect --force || true
          mkdir -p build
          cd build
          conan install .. --build=missing -s build_type=${BUILD_TYPE}
        '''
      }
    }
    stage('Configure') {
      steps {
        sh '''
          set -e
          cd build
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
        '''
      }
    }
    stage('Build') {
      steps {
        sh '''
          set -e
          cd build
          cmake --build . --config ${BUILD_TYPE} -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
        '''
      }
    }
    stage('Optional Tests') {
      when { expression { return params.RUN_TESTS } }
      steps {
        sh '''
          set -e
          if [ -d build ]; then cd build; fi
          if ctest --version >/dev/null 2>&1; then
            ctest --output-on-failure -C ${BUILD_TYPE} || true
          else
            echo "ctest non disponible. Skipping tests.";
          fi
        '''
      }
    }
  }
  post {
    success {
      archiveArtifacts artifacts: 'build/**', fingerprint: true, allowEmptyArchive: true
    }
    always {
      cleanWs(cleanWhenAborted: true, deleteDirs: true)
    }
  }
}
