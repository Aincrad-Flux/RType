pipeline {
  agent any
  parameters {
    string(name: 'SOURCE_REPO', defaultValue: 'https://github.com/Aincrad-Flux/RType.git', description: 'URL du repository à cloner')
    string(name: 'BRANCH', defaultValue: 'main', description: 'Branche à analyser')
    choice(name: 'BUILD_TYPE', choices: ['Debug', 'Release'], description: 'Type de build (pour compilation compilation DB)')
    booleanParam(name: 'RUN_CLANG_TIDY', defaultValue: true, description: 'Activer clang-tidy')
    booleanParam(name: 'RUN_CPPCHECK', defaultValue: true, description: 'Activer cppcheck')
  }
  options { timestamps(); ansiColor('xterm') }
  environment { REPORT_DIR = 'analysis-reports' }
  stages {
    stage('Checkout') { steps { git branch: params.BRANCH, url: params.SOURCE_REPO, credentialsId: 'github-https-token' } }
    stage('Prepare Build (Compile DB)') {
      steps {
        sh '''
          set -e
          mkdir -p build
          cd build
          conan profile detect --force || true
          conan install .. --build=missing -s build_type=${BUILD_TYPE} || true
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cp compile_commands.json .. || true
        '''
      }
    }
    stage('Static Analysis') {
      steps {
        sh '''
          set -e
          mkdir -p ${REPORT_DIR}
          echo "Sources:"; find src -name '*.cpp' || true
          if [ "${RUN_CPPCHECK}" = "true" ] && command -v cppcheck >/dev/null 2>&1; then
            echo 'Running cppcheck'
            cppcheck --enable=warning,performance,portability,style --inconclusive --std=c++17 \
              --project=compile_commands.json --suppress=missingIncludeSystem \
              2> ${REPORT_DIR}/cppcheck.txt || true
          else
            echo 'cppcheck non exécuté (désactivé ou absent)'
          fi
          if [ "${RUN_CLANG_TIDY}" = "true" ] && command -v clang-tidy >/dev/null 2>&1; then
            echo 'Running clang-tidy'
            # Limiter à 10 fichiers pour la démo si très grand
            FILES=$(jq -r '.[].file' compile_commands.json 2>/dev/null | grep -E '\\.(cpp|cxx|cc)$' | head -n 50)
            for f in $FILES; do
              clang-tidy "$f" -- -std=c++17 >> ${REPORT_DIR}/clang-tidy.txt 2>&1 || true
            done
          else
            echo 'clang-tidy non exécuté (désactivé ou absent)'
          fi
        '''
      }
    }
  }
  post {
    success { archiveArtifacts artifacts: '${REPORT_DIR}/**', allowEmptyArchive: true }
    always { cleanWs(cleanWhenAborted: true, deleteDirs: true) }
  }
}
