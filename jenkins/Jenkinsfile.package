pipeline {
  agent any
  parameters {
    string(name: 'SOURCE_REPO', defaultValue: 'https://github.com/Aincrad-Flux/RType.git', description: 'URL du repository à cloner')
    string(name: 'BRANCH', defaultValue: 'main', description: 'Branche à packager')
    choice(name: 'BUILD_TYPE', choices: ['Release', 'Debug'], description: 'Type de build pour le package')
    string(name: 'ARTIFACT_NAME', defaultValue: 'rtype-package', description: 'Nom de base de l artefact')
  }
  options { timestamps(); ansiColor('xterm') }
  environment { PKG_DIR = 'package'; BUILD_DIR='build' }
  stages {
    stage('Checkout') { steps { git branch: params.BRANCH, url: params.SOURCE_REPO, credentialsId: 'github-https-token' } }
    stage('Dependencies') {
      steps {
        sh '''
          set -e
          mkdir -p ${BUILD_DIR}
          cd ${BUILD_DIR}
          conan profile detect --force || true
          conan install .. --build=missing -s build_type=${BUILD_TYPE}
        '''
      }
    }
    stage('Build') {
      steps {
        sh '''
          set -e
          cd ${BUILD_DIR}
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
          cmake --build . --config ${BUILD_TYPE} -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
        '''
      }
    }
    stage('Assemble Package') {
      steps {
        sh '''
          set -e
          rm -rf ${PKG_DIR}
          mkdir -p ${PKG_DIR}/bin ${PKG_DIR}/config ${PKG_DIR}/docs
          # Copie binaire(s) supposés dans build (ajuster selon projet réel)
          find ${BUILD_DIR} -maxdepth 3 -type f -perm +111 -print -exec cp {} ${PKG_DIR}/bin/ \; 2>/dev/null || true
          cp -a README.md ${PKG_DIR}/docs/ 2>/dev/null || true
          cp -a subject.md ${PKG_DIR}/docs/ 2>/dev/null || true
          echo "BuildType=${BUILD_TYPE}" > ${PKG_DIR}/BUILD_INFO
        '''
      }
    }
    stage('Archive') {
      steps {
        script {
          def ts = new Date().format('yyyyMMdd_HHmmss')
          env.ARCHIVE_NAME = "${ARTIFACT_NAME}-${BRANCH}-${BUILD_TYPE}-${ts}.tar.gz".replaceAll(' ', '_')
        }
        sh 'tar -czf ${ARCHIVE_NAME} ${PKG_DIR}'
      }
    }
  }
  post {
    success { archiveArtifacts artifacts: '*.tar.gz', fingerprint: true }
    always { cleanWs(cleanWhenAborted: true, deleteDirs: true) }
  }
}
